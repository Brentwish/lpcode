     1                                  ; Program Description:  Add the contents of two arrays and store the result
     2                                  ;                       in another. If the add results in a carry, force
     3                                  ;                       the result to be 0. After, print the ascii representation
     4                                  ;                       to the console both forwards and backwards.
     5                                  ; Author:               Brent Wishart
     6                                  ; Date:                 Mar 20 2016
     7                                  ; OS:                   Linux MINT_VM
     8                                  ; IDE/Compiler:         vi/nasm
     9                                  
    10                                  bits 32
    11                                  section .data
    12                                  
    13 00000000 1030F0                    array_1 db 0x10, 0x30, 0xf0               ; Array 1
    14 00000003 205012                            db 0x20, 0x50, 0x12               ;
    15                                      .LENGTH equ ($ - array_1)               ;
    16                                  
    17 00000006 E04022                    array_2 db 0xe0, 0x40, 0x22               ; Array 2
    18 00000009 E54055                            db 0xe5, 0x40, 0x55               ;
    19                                      .LENGTH equ ($ - array_2)               ;
    20                                  
    21 0000000C 00<rept>                  array_result times array_1.LENGTH db 0x0  ; Result Array
    22                                      .LENGTH equ ($ - array_result)          ;
    23                                  
    24 00000012 00<rept>                  array_print times 4 db 0x0                ; Array to print
    25                                      .LENGTH equ ($ - array_print)           ;
    26 00000016 0D0A00                    newline db 0dh, 0ah, 0h                   ; Newline values
    27 00000019 0900                      tabs db 09h, 0h                           ; Tabstop values
    28                                  
    29                                  section .bss
    30                                  section .text
    31                                    global _start
    32                                  _start:                           ; START
    33 00000000 90                        nop                                   ;
    34                                  
    35 00000001 50                        push eax                              ; Push EAX to the stack
    36 00000002 53                        push ebx                              ; Push EBX to the stack
    37 00000003 51                        push ecx                              ; Push ECX to the stack
    38 00000004 56                        push esi                              ; Push ESI to the stack
    39                                  
    40 00000005 E83B000000                call add                              ; Add the arrays and store result_array
    41 0000000A BF[0C000000]              mov edi, array_result                 ; Pass array_result to print_array func
    42 0000000F B906000000                mov ecx, array_result.LENGTH          ; Pass the length too
    43 00000014 E856000000                call print_array                      ; Print the array to the console
    44 00000019 E8ED000000                call print_newline                    ; Formatting
    45                                  
    46 0000001E BF[0C000000]              mov edi, array_result                 ; Parameters for both reverse_array
    47 00000023 B906000000                mov ecx, array_result.LENGTH          ; and print_array
    48 00000028 E89A000000                call reverse_array                    ; Reverse the contents of the array
    49 0000002D E83D000000                call print_array                      ; Print the reversed array
    50 00000032 E8D4000000                call print_newline                    ; Formatting
    51                                  
    52 00000037 5E                        pop esi                               ; Pop ESI from the stack
    53 00000038 59                        pop ecx                               ; Pop ECX from the stack
    54 00000039 5B                        pop ebx                               ; Pop EBX from the stack
    55 0000003A 58                        pop eax                               ; Pop EAX from the stack
    56                                  
    57 0000003B B801000000                mov eax, 1                            ; Exit system call value
    58 00000040 83C000                    add eax, 0                            ; Exit return code
    59 00000043 CD80                      int 0x80                              ; Call the kernel
    60                                  
    61                                  ;----------------------------------------
    62                                  add:
    63                                  ; Takes:
    64                                  ;   Nothing
    65                                  ; Modifies:
    66                                  ;   array_result variable
    67                                  ;     Iterates through array_1 and array_2, adding the elements and storing
    68                                  ;     the result in array_result
    69                                  ;----------------------------------------
    70 00000045 BE00000000                mov esi, 0x0                          ; Initialize ESI to 0
    71 0000004A B906000000                mov ecx, array_1.LENGTH               ; Set loop count to array size
    72                                    add_loop:
    73 0000004F 8A86[00000000]            mov al, [array_1 + esi]               ; Move first value to EAX
    74 00000055 0286[06000000]            add al, [array_2 + esi]               ; Add the other value to EAX
    75 0000005B 7202                      jc carry                              ; Jump to carry label if result of add threw a carry
    76 0000005D EB04                      jmp end                               ; Go to end label
    77                                  
    78                                    carry:
    79 0000005F B000                        mov al, 0x0                         ; Result of add should be zero if carry
    80 00000061 EB00                        jmp end                             ; Go to end label
    81                                  
    82                                    end:
    83 00000063 8886[0C000000]              mov [array_result + esi], al        ; Move the result of the add to result array
    84 00000069 83C601                      add esi, 1                          ; Increment ESI to access next array element
    85 0000006C E2E1                        loop add_loop                       ; Loop
    86 0000006E C3                      ret                                 ; End add
    87                                  ;----------------------------------------
    88                                  
    89                                  ;----------------------------------------
    90                                  print_array:
    91                                  ; Takes:
    92                                  ;   EDI:  Address of the array to print
    93                                  ;   ECX:  Length of the array to print
    94                                  ; Modifies:
    95                                  ;   array_print variable
    96                                  ;     Iterates through the array to print, getting the ascii value at each element
    97                                  ;     and printing it to the console. array_print is the temporary variable that
    98                                  ;     stores the ascii value.
    99                                  ;----------------------------------------
   100 0000006F 60                        pushad                                ; Push registers to protect main loop
   101                                    array_loop:
   102 00000070 B800000000                  mov eax, 0h                         ; Clear the EAX register
   103 00000075 A3[12000000]                mov [array_print], eax              ; Clear array_print
   104 0000007A 8A07                        mov al, BYTE [ edi ]                ; Pass value from array_result to get_ascii_array
   105 0000007C 60                          pushad                              ; Protect the registers
   106 0000007D E81A000000                  call get_ascii_array                ; Puts the ascii value at edi into array_print
   107 00000082 B9[12000000]                mov ecx, array_print                ; Pass address of array_print to print function
   108 00000087 BA04000000                  mov edx, array_print.LENGTH         ; Pass the length too
   109 0000008C E852000000                  call print                          ; Print to console
   110 00000091 E85C000000                  call print_space                    ; Formatting
   111 00000096 61                          popad                               ; Restore the registers
   112 00000097 47                          inc edi                             ; Add 1 to edi (size of byte)
   113 00000098 E2D6                      loop array_loop                       ; Loop
   114 0000009A 61                        popad                                 ; Pop registers and go back to main loop
   115 0000009B C3                      ret                                 ; End print_array
   116                                  ;----------------------------------------
   117                                  
   118                                  ;----------------------------------------
   119                                  get_ascii_array:
   120                                  ; Takes:
   121                                  ;   EAX:  The raw value to convert to ascii
   122                                  ; Modifies:
   123                                  ;   array_print
   124                                  ;     stores the ascii value
   125                                  ; Notes:
   126                                  ;   Because of the way this algorithm works, each digit is stored from the most significant
   127                                  ;   bit to least. As a result, the function reverse_array is used to correct it.
   128                                  ;----------------------------------------
   129 0000009C B30A                      mov bl, BYTE 0ah                      ; Get ready to divide ax by 10
   130 0000009E BF00000000                mov edi, 0h                           ; Initialize position counter
   131                                    hex_to_dec:
   132 000000A3 F6F3                        div bl                              ; Divide. Remainder will be in ah, result in al
   133 000000A5 80C430                      add ah, 30h                         ; add 30h to remainder to convert to ascii
   134 000000A8 88A7[12000000]              mov [array_print + edi], ah         ; Move the ascii result into the array
   135 000000AE B400                        mov ah, 0h                          ; clear the ah
   136 000000B0 3C00                        cmp al, 0h                          ; Check quotient to see if 0
   137 000000B2 7403                        je to_ascii_end                     ; If it is, print the ascii number
   138 000000B4 47                          inc edi                             ; Increment to next position
   139 000000B5 EBEC                      jmp hex_to_dec                        ; Go to the top
   140                                  
   141                                    to_ascii_end:
   142 000000B7 BF[12000000]              mov edi, array_print                  ; Parameters for reverse_array
   143 000000BC B904000000                mov ecx, array_print.LENGTH           ; Parameters for reverse_array
   144 000000C1 E801000000                call reverse_array                    ; Reverse array_print
   145 000000C6 C3                      ret                                 ; End get_ascii_array
   146                                  ;----------------------------------------
   147                                  
   148                                  ;----------------------------------------
   149                                  reverse_array:
   150                                  ; Takes:
   151                                  ;   EDI:  Address of the array to reverse
   152                                  ;   ECX:  Length of the array to reverse
   153                                  ; Modifies:
   154                                  ;   [ EDI ]:
   155                                  ;     Reverses the contents of the array
   156                                  ; Notes:
   157                                  ;   Since this function requires two independent loops, the contents of edi and ecx are
   158                                  ;   stored in esi and ebp and then used to refresh edi and ecx.
   159                                  ;----------------------------------------
   160 000000C7 60                        pushad                                ; Push registers
   161 000000C8 89FE                      mov esi, edi                          ; Save the location and size of the array for
   162 000000CA 89CD                      mov ebp, ecx                          ; use in the second part of this function
   163                                    reverse_one:                        ; First Reverse Loop
   164 000000CC B800000000                  mov eax, 0h                         ; Reset EAX
   165 000000D1 8A07                        mov al, BYTE [edi]                  ; Move byte at esi to al
   166 000000D3 50                          push eax                            ; and push it to the stack
   167 000000D4 47                          inc edi                             ; Go to next position in array
   168 000000D5 E2F5                        loop reverse_one                    ; Loop
   169                                  
   170 000000D7 89E9                      mov ecx, ebp                          ; Reset ecx and esi to their
   171 000000D9 89F7                      mov edi, esi                          ; initial values
   172                                    reverse_two:                        ; Second Loop
   173 000000DB 58                          pop eax                             ; Pop to EAX
   174 000000DC 8807                        mov [edi], BYTE al                  ; Move result to position at esi
   175 000000DE 47                          inc edi                             ; Go to next position in array
   176 000000DF E2FA                        loop reverse_two                    ; Loop
   177                                  
   178 000000E1 61                        popad                                 ; Pop registers
   179 000000E2 C3                      ret                                 ; End reverse_array
   180                                  ;----------------------------------------
   181                                  
   182                                  ;----------------------------------------
   183                                  print:
   184                                  ; Takes:
   185                                  ;   ECX:  Address of the array to print
   186                                  ;   EDX:  Length of the array to print
   187                                  ; Modifies:
   188                                  ;   Nothing, but calls the kernel
   189                                  ;----------------------------------------
   190 000000E3 60                        pushad                                ; Protect the registers
   191 000000E4 B804000000                mov eax, 0x04                         ; Write
   192 000000E9 BB01000000                mov ebx, 0x01                         ; Stdout
   193 000000EE CD80                      int 80h                               ; Interupt
   194 000000F0 61                        popad                                 ; Pop the registers back
   195 000000F1 C3                      ret                                 ;  End Print_newline
   196                                  ;----------------------------------------
   197                                  
   198                                  ;----------------------------------------
   199                                  print_space:
   200                                  ; Takes:
   201                                  ;   tabs variable
   202                                  ; Modifies:
   203                                  ;   Nothing, but calls the kernel
   204                                  ;----------------------------------------
   205 000000F2 60                        pushad                                ; Protect the registers
   206 000000F3 B9[19000000]              mov ecx, tabs                         ; Move the location
   207 000000F8 BA02000000                mov edx, 2h                           ; Move the length
   208 000000FD B804000000                mov eax, 0x04                         ; Write
   209 00000102 BB01000000                mov ebx, 0x01                         ; Stdout
   210 00000107 CD80                      int 80h                               ; Interupt
   211 00000109 61                        popad                                 ; Pop the registers back
   212 0000010A C3                      ret                                 ;  End Print_space
   213                                  ;----------------------------------------
   214                                  
   215                                  ;----------------------------------------
   216                                  print_newline:
   217                                  ; Takes:
   218                                  ;   newline variable
   219                                  ; Modifies:
   220                                  ;   Nothing, but calls the kernel
   221                                  ;----------------------------------------
   222 0000010B 60                        pushad                                ; Protect the registers
   223 0000010C B9[16000000]              mov ecx, newline                      ; Move the location
   224 00000111 BA03000000                mov edx, 3h                           ; Move the length
   225 00000116 B804000000                mov eax, 0x04                         ; Write
   226 0000011B BB01000000                mov ebx, 0x01                         ; Stdout
   227 00000120 CD80                      int 80h                               ; Interupt
   228 00000122 61                        popad                                 ; Pop the registers back
   229 00000123 C3                      ret                                 ;  End Print_newline
   230                                  ;----------------------------------------
